{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":2819730,"sourceType":"datasetVersion","datasetId":1723812}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import transforms\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, classification_report\nimport pandas as pd\nfrom PIL import Image\nimport timm\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport random\n\n# ----------------------------\n# Config\n# ----------------------------\nIMG_SIZE = 380\nBATCH_SIZE = 32\nEPOCHS = 20\nLR = 1e-4   # lowered learning rate\nSEED = 42\n\nDATA_CSV = \"/kaggle/input/messidor2preprocess/messidor_data.csv\"\nIMG_DIR = \"/kaggle/input/messidor2preprocess/messidor-2/messidor-2/preprocess\"\nDEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n# reproducibility\ntorch.manual_seed(SEED)\nnp.random.seed(SEED)\nrandom.seed(SEED)\nif DEVICE == \"cuda\":\n    torch.cuda.manual_seed_all(SEED)\n\n# ----------------------------\n# Dataset\n# ----------------------------\nclass MessidorDataset(Dataset):\n    def __init__(self, df, img_dir, transform=None):\n        self.df = df.reset_index(drop=True)\n        self.img_dir = img_dir\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        row = self.df.iloc[idx]\n        img_id = row['id_code']       # already includes extension\n        label = int(row['diagnosis'])\n        img_path = os.path.join(self.img_dir, img_id)\n        image = Image.open(img_path).convert(\"RGB\")\n        if self.transform:\n            image = self.transform(image)\n        return image, label\n\n\nif __name__ == \"__main__\":\n    # ----------------------------\n    # Data Prep\n    # ----------------------------\n    df = pd.read_csv(DATA_CSV)\n\n    # Ensure labels are ints 0â€“4\n    if df[\"diagnosis\"].dtype not in [\"int64\", \"int32\"]:\n        label_map = {cls: i for i, cls in enumerate(sorted(df[\"diagnosis\"].unique()))}\n        df[\"diagnosis\"] = df[\"diagnosis\"].map(label_map)\n\n    print(\"Unique labels:\", np.unique(df[\"diagnosis\"]))\n    print(\"Label distribution:\\n\", df[\"diagnosis\"].value_counts())\n\n    train_df, val_df = train_test_split(\n        df, test_size=0.2, stratify=df[\"diagnosis\"], random_state=SEED\n    )\n\n    train_transform = transforms.Compose([\n        transforms.RandomResizedCrop(IMG_SIZE, scale=(0.8, 1.0)),\n        transforms.RandomHorizontalFlip(),\n        transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),\n        transforms.RandomRotation(15),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225]),\n    ])\n\n    val_transform = transforms.Compose([\n        transforms.Resize((IMG_SIZE, IMG_SIZE)),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225]),\n    ])\n\n    train_dataset = MessidorDataset(train_df, IMG_DIR, transform=train_transform)\n    val_dataset = MessidorDataset(val_df, IMG_DIR, transform=val_transform)\n\n    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True,\n                              num_workers=4, pin_memory=True)\n    val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False,\n                            num_workers=4, pin_memory=True)\n\n    # ----------------------------\n    # Model (MobileViT)\n    # ----------------------------\n    # Try \"mobilevit_xxs\", \"mobilevit_xs\", or other mobilevit variants available in your timm install.\n    model_name = \"mobilevit_xxs\"   # change if your timm doesn't have this exact name\n    print(f\"Creating model: {model_name}\")\n    model = timm.create_model(model_name, pretrained=True, num_classes=5)\n\n    # Multi-GPU support if available\n    if torch.cuda.device_count() > 1:\n        print(f\"Using {torch.cuda.device_count()} GPUs via DataParallel.\")\n        model = nn.DataParallel(model)\n\n    model = model.to(DEVICE)\n\n    # ----------------------------\n    # Loss, Optimizer, Scheduler, AMP\n    # ----------------------------\n    criterion = nn.CrossEntropyLoss(label_smoothing=0.1)\n    optimizer = optim.AdamW(model.parameters(), lr=LR, weight_decay=1e-4)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=EPOCHS)\n    scaler = torch.cuda.amp.GradScaler(enabled=(DEVICE == \"cuda\"))\n\n    # ----------------------------\n    # Training loop\n    # ----------------------------\n    best_acc = 0.0\n    best_ckpt = \"/kaggle/working/best_mobilevit.pth\"\n    print(f\"Starting training for {EPOCHS} epochs. Steps/epoch={len(train_loader)}, LR={LR}\")\n\n    for epoch in range(EPOCHS):\n        model.train()\n        train_loss = 0.0\n        train_preds, train_targets = [], []\n        train_bar = tqdm(train_loader, desc=f\"Epoch {epoch+1}/{EPOCHS} [Train]\", leave=False)\n\n        for imgs, labels in train_bar:\n            imgs = imgs.to(DEVICE, non_blocking=True)\n            labels = labels.to(DEVICE, non_blocking=True)\n\n            optimizer.zero_grad()\n            # use recommended AMP API\n            with torch.amp.autocast(device_type=\"cuda\", enabled=(DEVICE == \"cuda\")):\n                outputs = model(imgs)\n                loss = criterion(outputs, labels)\n\n            scaler.scale(loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n\n            train_loss += loss.item() * imgs.size(0)\n            preds = outputs.argmax(dim=1).detach().cpu().numpy()\n            train_preds.extend(preds)\n            train_targets.extend(labels.cpu().numpy())\n            train_bar.set_postfix(loss=loss.item())\n\n        train_loss /= len(train_loader.dataset)\n        train_acc = accuracy_score(train_targets, train_preds)\n\n        # ----------------------------\n        # Validation\n        # ----------------------------\n        model.eval()\n        val_loss = 0.0\n        val_preds, val_targets = [], []\n        val_bar = tqdm(val_loader, desc=f\"Epoch {epoch+1}/{EPOCHS} [Val]\", leave=False)\n        with torch.no_grad():\n            for imgs, labels in val_bar:\n                imgs = imgs.to(DEVICE, non_blocking=True)\n                labels = labels.to(DEVICE, non_blocking=True)\n                with torch.amp.autocast(device_type=\"cuda\", enabled=(DEVICE == \"cuda\")):\n                    outputs = model(imgs)\n                    loss = criterion(outputs, labels)\n\n                val_loss += loss.item() * imgs.size(0)\n                preds = outputs.argmax(dim=1).detach().cpu().numpy()\n                val_preds.extend(preds)\n                val_targets.extend(labels.cpu().numpy())\n                val_bar.set_postfix(loss=loss.item())\n\n        val_loss /= len(val_loader.dataset)\n        val_acc = accuracy_score(val_targets, val_preds)\n        val_f1 = f1_score(val_targets, val_preds, average=\"weighted\")\n\n        print(f\"Epoch {epoch+1}/{EPOCHS} | \"\n              f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f} | \"\n              f\"Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.4f}, Val F1: {val_f1:.4f}\")\n\n        scheduler.step()\n\n        # Save best model (handle DataParallel wrapper)\n        if val_acc > best_acc:\n            best_acc = val_acc\n            state_dict_to_save = model.module.state_dict() if hasattr(model, \"module\") else model.state_dict()\n            torch.save(state_dict_to_save, best_ckpt)\n            print(f\"âœ… New best model saved. Best Val Acc: {best_acc:.4f}\")\n\n    print(f\"\\nâœ… Training complete. Best Val Acc: {best_acc:.4f}\")\n\n    # ----------------------------\n    # Evaluation (load best)\n    # ----------------------------\n    state_dict = torch.load(best_ckpt, map_location=DEVICE)\n    # if model was DataParallel, load into model.module if needed\n    if hasattr(model, \"module\"):\n        model.module.load_state_dict(state_dict)\n    else:\n        model.load_state_dict(state_dict)\n    model.eval()\n\n    all_preds, all_labels = [], []\n    with torch.no_grad():\n        for imgs, labels in val_loader:\n            imgs = imgs.to(DEVICE)\n            labels = labels.to(DEVICE)\n            with torch.amp.autocast(device_type=\"cuda\", enabled=(DEVICE == \"cuda\")):\n                outputs = model(imgs)\n            _, preds = torch.max(outputs, 1)\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n\n    acc = accuracy_score(all_labels, all_preds)\n    f1 = f1_score(all_labels, all_preds, average=\"weighted\")\n    precision = precision_score(all_labels, all_preds, average=\"weighted\", zero_division=0)\n    recall = recall_score(all_labels, all_preds, average=\"weighted\", zero_division=0)\n    cm = confusion_matrix(all_labels, all_preds)\n\n    print(f\"\\nðŸ“Š Accuracy: {acc:.4f}\")\n    print(f\"ðŸ“Š F1 Score: {f1:.4f}\")\n    print(f\"ðŸ“Š Precision: {precision:.4f}\")\n    print(f\"ðŸ“Š Recall: {recall:.4f}\")\n    print(\"\\nClassification Report:\\n\", classification_report(all_labels, all_preds, zero_division=0))\n\n    plt.figure(figsize=(8,6))\n    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\",\n                xticklabels=[0,1,2,3,4], yticklabels=[0,1,2,3,4])\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"True\")\n    plt.title(\"MobileViT Confusion Matrix\")\n    plt.tight_layout()\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T04:19:50.025357Z","iopub.execute_input":"2025-08-28T04:19:50.025872Z","iopub.status.idle":"2025-08-28T04:26:15.689730Z","shell.execute_reply.started":"2025-08-28T04:19:50.025850Z","shell.execute_reply":"2025-08-28T04:26:15.688884Z"}},"outputs":[{"name":"stdout","text":"Unique labels: [0 1 2 3 4]\nLabel distribution:\n diagnosis\n0    1017\n2     347\n1     270\n3      75\n4      35\nName: count, dtype: int64\nCreating model: mobilevit_xxs\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/5.14M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3030d0f600084e8081f76c6aafd01646"}},"metadata":{}},{"name":"stderr","text":"/tmp/ipykernel_2046/4106912826.py:125: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n  scaler = torch.cuda.amp.GradScaler(enabled=(DEVICE == \"cuda\"))\n","output_type":"stream"},{"name":"stdout","text":"Using 2 GPUs via DataParallel.\nStarting training for 20 epochs. Steps/epoch=44, LR=0.0001\n","output_type":"stream"},{"name":"stderr","text":"                                                                              \r","output_type":"stream"},{"name":"stdout","text":"Epoch 1/20 | Train Loss: 1.5658, Train Acc: 0.4072 | Val Loss: 1.4758, Val Acc: 0.4327, Val F1: 0.4462\nâœ… New best model saved. Best Val Acc: 0.4327\n","output_type":"stream"},{"name":"stderr","text":"                                                                              \r","output_type":"stream"},{"name":"stdout","text":"Epoch 2/20 | Train Loss: 1.4424, Train Acc: 0.4602 | Val Loss: 1.3346, Val Acc: 0.5931, Val F1: 0.5696\nâœ… New best model saved. Best Val Acc: 0.5931\n","output_type":"stream"},{"name":"stderr","text":"                                                                              \r","output_type":"stream"},{"name":"stdout","text":"Epoch 3/20 | Train Loss: 1.3160, Train Acc: 0.6129 | Val Loss: 1.1741, Val Acc: 0.7049, Val F1: 0.6642\nâœ… New best model saved. Best Val Acc: 0.7049\n","output_type":"stream"},{"name":"stderr","text":"                                                                              \r","output_type":"stream"},{"name":"stdout","text":"Epoch 4/20 | Train Loss: 1.2004, Train Acc: 0.6681 | Val Loss: 1.0573, Val Acc: 0.6934, Val F1: 0.6203\n","output_type":"stream"},{"name":"stderr","text":"                                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 5/20 | Train Loss: 1.0929, Train Acc: 0.6982 | Val Loss: 1.0271, Val Acc: 0.7020, Val F1: 0.6595\n","output_type":"stream"},{"name":"stderr","text":"                                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 6/20 | Train Loss: 1.0278, Train Acc: 0.7211 | Val Loss: 1.0068, Val Acc: 0.7077, Val F1: 0.6634\nâœ… New best model saved. Best Val Acc: 0.7077\n","output_type":"stream"},{"name":"stderr","text":"                                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 7/20 | Train Loss: 0.9848, Train Acc: 0.7183 | Val Loss: 0.9572, Val Acc: 0.7192, Val F1: 0.6699\nâœ… New best model saved. Best Val Acc: 0.7192\n","output_type":"stream"},{"name":"stderr","text":"                                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 8/20 | Train Loss: 0.9502, Train Acc: 0.7462 | Val Loss: 0.9490, Val Acc: 0.7393, Val F1: 0.6879\nâœ… New best model saved. Best Val Acc: 0.7393\n","output_type":"stream"},{"name":"stderr","text":"                                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 9/20 | Train Loss: 0.9252, Train Acc: 0.7448 | Val Loss: 0.9116, Val Acc: 0.7679, Val F1: 0.7080\nâœ… New best model saved. Best Val Acc: 0.7679\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 10/20 | Train Loss: 0.9151, Train Acc: 0.7570 | Val Loss: 0.9009, Val Acc: 0.7393, Val F1: 0.7032\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 11/20 | Train Loss: 0.9122, Train Acc: 0.7441 | Val Loss: 0.8754, Val Acc: 0.7564, Val F1: 0.7204\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 12/20 | Train Loss: 0.8986, Train Acc: 0.7591 | Val Loss: 0.8889, Val Acc: 0.7564, Val F1: 0.7200\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 13/20 | Train Loss: 0.8665, Train Acc: 0.7756 | Val Loss: 0.8808, Val Acc: 0.7564, Val F1: 0.7219\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 14/20 | Train Loss: 0.8892, Train Acc: 0.7634 | Val Loss: 0.8697, Val Acc: 0.7708, Val F1: 0.7352\nâœ… New best model saved. Best Val Acc: 0.7708\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 15/20 | Train Loss: 0.8546, Train Acc: 0.7728 | Val Loss: 0.8683, Val Acc: 0.7622, Val F1: 0.7205\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 16/20 | Train Loss: 0.8546, Train Acc: 0.7763 | Val Loss: 0.8676, Val Acc: 0.7708, Val F1: 0.7354\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 17/20 | Train Loss: 0.8473, Train Acc: 0.7742 | Val Loss: 0.8761, Val Acc: 0.7622, Val F1: 0.7279\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 18/20 | Train Loss: 0.8453, Train Acc: 0.7835 | Val Loss: 0.8707, Val Acc: 0.7622, Val F1: 0.7278\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 19/20 | Train Loss: 0.8415, Train Acc: 0.7799 | Val Loss: 0.8722, Val Acc: 0.7622, Val F1: 0.7245\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 20/20 | Train Loss: 0.8362, Train Acc: 0.7814 | Val Loss: 0.8645, Val Acc: 0.7736, Val F1: 0.7382\nâœ… New best model saved. Best Val Acc: 0.7736\n\nâœ… Training complete. Best Val Acc: 0.7736\n\nðŸ“Š Accuracy: 0.7736\nðŸ“Š F1 Score: 0.7382\nðŸ“Š Precision: 0.7327\nðŸ“Š Recall: 0.7736\n\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       0.79      0.96      0.87       204\n           1       0.50      0.20      0.29        54\n           2       0.82      0.74      0.78        69\n           3       0.68      0.87      0.76        15\n           4       0.00      0.00      0.00         7\n\n    accuracy                           0.77       349\n   macro avg       0.56      0.55      0.54       349\nweighted avg       0.73      0.77      0.74       349\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"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\n"},"metadata":{}}],"execution_count":1}]}